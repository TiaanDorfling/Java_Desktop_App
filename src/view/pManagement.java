/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;
import java.time.LocalDate;
import java.time.LocalTime;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.connectDb;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author rjjou
 */
public class pManagement extends javax.swing.JFrame {

    /**
     * Creates new form pManagement
     */
    public pManagement() {
        initComponents();

    // connect once
    try {
        db.connect();
    } catch (ClassNotFoundException ex) {
        JOptionPane.showMessageDialog(this,
            "Database driver not found:\n" + ex.getMessage(),
            "DB Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    DefaultTableModel feedbackModel = new DefaultTableModel(
        new Object[0][0],
        new String[] { "ID", "Student Name", "Counselor Name", "Rating", "Comment" }
    ) {
        @Override public boolean isCellEditable(int row, int col) {
            return false;
        }
    };
    tblFeedback.setModel(feedbackModel);
    tblFeedback.getColumnModel().getColumn(0).setMinWidth(0);
    tblFeedback.getColumnModel().getColumn(0).setMaxWidth(0);
    tblFeedback.setDefaultEditor(Object.class, null);

    loadCounselorsIntoCombo();
    loadFeedback();
}
    private void loadCounselorsIntoCombo() {
  cmbFCounselor.removeAllItems();
  for (Object[] row : db.viewCounselors()) {
    cmbFCounselor.addItem((String)row[0]);
  }
}

/**
 * Loads all feedback rows from the DB into the table
 */
private void loadFeedback() {
  DefaultTableModel m = (DefaultTableModel)tblFeedback.getModel();
  m.setRowCount(0);
  for (Object[] row : db.viewFeedback()) {
    m.addRow(row);
  }
}

/**
 * Clears the input fields on the Feedback tab
 */
private void clearFeedbackFields() {
  txtFStudentName.setText("");
  spnRating.setValue(1);
  txtFComment.setText("");
  cmbFCounselor.setSelectedIndex(0);
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpMain = new javax.swing.JTabbedPane();
        pHome = new javax.swing.JPanel();
        lblHead = new javax.swing.JLabel();
        pCounselor = new javax.swing.JPanel();
        lblCHead = new javax.swing.JLabel();
        spCounselors = new javax.swing.JScrollPane();
        tblCounselors = new javax.swing.JTable();
        lblCTable = new javax.swing.JLabel();
        txtCAvailable = new javax.swing.JTextField();
        txtCSpecialization = new javax.swing.JTextField();
        txtCName = new javax.swing.JTextField();
        btnCAdd = new javax.swing.JButton();
        btnCClear = new javax.swing.JButton();
        btnCUpdate = new javax.swing.JButton();
        btnCRemove = new javax.swing.JButton();
        lblCName = new javax.swing.JLabel();
        lblCSpecialization = new javax.swing.JLabel();
        lblCAvailability = new javax.swing.JLabel();
        btnCView = new javax.swing.JButton();
        pFeedback = new javax.swing.JPanel();
        lblFHead = new javax.swing.JLabel();
        spFeedback = new javax.swing.JScrollPane();
        tblFeedback = new javax.swing.JTable();
        lblFTable = new javax.swing.JLabel();
        txtFComment = new javax.swing.JTextField();
        btnFClear = new javax.swing.JButton();
        btnFEdit = new javax.swing.JButton();
        btnFSubmit = new javax.swing.JButton();
        lblFName = new javax.swing.JLabel();
        lblFRating = new javax.swing.JLabel();
        spnRating = new javax.swing.JSpinner();
        btnFDelete = new javax.swing.JButton();
        txtFStudentName = new javax.swing.JTextField();
        lblFComment = new javax.swing.JLabel();
        cmbFCounselor = new javax.swing.JComboBox<>();
        lblFCounselorName = new javax.swing.JLabel();
        pAppointment = new javax.swing.JPanel();
        lblAHead = new javax.swing.JLabel();
        lblACounselor = new javax.swing.JLabel();
        lblATime = new javax.swing.JLabel();
        txtATime = new javax.swing.JTextField();
        lblADate = new javax.swing.JLabel();
        txtADate = new javax.swing.JTextField();
        lblStudentInfo = new javax.swing.JLabel();
        txtStudentInfo = new javax.swing.JTextField();
        cmbCounselor = new javax.swing.JComboBox<>();
        btnBook = new javax.swing.JButton();
        btnAClear = new javax.swing.JButton();
        btnAReschedule = new javax.swing.JButton();
        spAppointments = new javax.swing.JScrollPane();
        tblAppointments = new javax.swing.JTable();
        lblATable = new javax.swing.JLabel();
        btnACancel = new javax.swing.JButton();
        btnView = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tpMain.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.black));

        lblHead.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblHead.setText("Main Dashboard");

        javax.swing.GroupLayout pHomeLayout = new javax.swing.GroupLayout(pHome);
        pHome.setLayout(pHomeLayout);
        pHomeLayout.setHorizontalGroup(
            pHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pHomeLayout.createSequentialGroup()
                .addGap(408, 408, 408)
                .addComponent(lblHead)
                .addContainerGap(427, Short.MAX_VALUE))
        );
        pHomeLayout.setVerticalGroup(
            pHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHead)
                .addContainerGap(526, Short.MAX_VALUE))
        );

        tpMain.addTab("Home", pHome);

        lblCHead.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblCHead.setText("Counselors Page");

        tblCounselors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Counselor Name", "Specialization", "Availability"
            }
        ));
        spCounselors.setViewportView(tblCounselors);

        lblCTable.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblCTable.setText("Current Counselors");

        btnCAdd.setText("Add Counselor");
        btnCAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCAddActionPerformed(evt);
            }
        });

        btnCClear.setText("Clear Fields");
        btnCClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCClearActionPerformed(evt);
            }
        });

        btnCUpdate.setText("Update Info");
        btnCUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCUpdateActionPerformed(evt);
            }
        });

        btnCRemove.setText("Remove");
        btnCRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCRemoveActionPerformed(evt);
            }
        });

        lblCName.setText("Enter counselor name and surname:");

        lblCSpecialization.setText("Enter specialization:");

        lblCAvailability.setText("Available? (Y/N)");

        btnCView.setText("View");
        btnCView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pCounselorLayout = new javax.swing.GroupLayout(pCounselor);
        pCounselor.setLayout(pCounselorLayout);
        pCounselorLayout.setHorizontalGroup(
            pCounselorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCounselorLayout.createSequentialGroup()
                .addGroup(pCounselorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pCounselorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pCounselorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pCounselorLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblCSpecialization))
                            .addGroup(pCounselorLayout.createSequentialGroup()
                                .addComponent(lblCName)
                                .addGap(287, 287, 287)
                                .addComponent(lblCHead))
                            .addComponent(txtCAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCName, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCAvailability)))
                    .addGroup(pCounselorLayout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(btnCView)))
                .addContainerGap(351, Short.MAX_VALUE))
            .addGroup(pCounselorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pCounselorLayout.createSequentialGroup()
                    .addGap(9, 9, 9)
                    .addGroup(pCounselorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pCounselorLayout.createSequentialGroup()
                            .addGroup(pCounselorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pCounselorLayout.createSequentialGroup()
                                    .addComponent(btnCAdd)
                                    .addGap(61, 61, 61)
                                    .addComponent(btnCClear))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pCounselorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCRemove)
                                    .addComponent(btnCUpdate)))
                            .addGap(18, 18, 18)
                            .addComponent(spCounselors, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE))
                        .addGroup(pCounselorLayout.createSequentialGroup()
                            .addComponent(txtCSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(211, 211, 211)
                            .addComponent(lblCTable)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addGap(10, 10, 10)))
        );
        pCounselorLayout.setVerticalGroup(
            pCounselorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCounselorLayout.createSequentialGroup()
                .addGroup(pCounselorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pCounselorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblCHead))
                    .addGroup(pCounselorLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(lblCName)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCSpecialization)
                .addGap(49, 49, 49)
                .addComponent(lblCAvailability)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(172, 172, 172)
                .addComponent(btnCView)
                .addContainerGap(172, Short.MAX_VALUE))
            .addGroup(pCounselorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pCounselorLayout.createSequentialGroup()
                    .addGap(102, 102, 102)
                    .addGroup(pCounselorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCTable))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(pCounselorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pCounselorLayout.createSequentialGroup()
                            .addGap(106, 106, 106)
                            .addGroup(pCounselorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnCAdd)
                                .addComponent(btnCClear))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCUpdate)
                            .addGap(18, 18, 18)
                            .addComponent(btnCRemove)
                            .addGap(40, 40, 40))
                        .addComponent(spCounselors, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(46, 46, 46)))
        );

        tpMain.addTab("Counselors", pCounselor);

        lblFHead.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblFHead.setText("Feedback Page");

        tblFeedback.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Student Name", "Counselor Name", "Rating", "Comment"
            }
        ));
        tblFeedback.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFeedbackMouseClicked(evt);
            }
        });
        spFeedback.setViewportView(tblFeedback);

        lblFTable.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblFTable.setText("Current Reviews");

        btnFClear.setText("Clear Fields");
        btnFClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFClearActionPerformed(evt);
            }
        });

        btnFEdit.setText("Edit Review");
        btnFEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFEditActionPerformed(evt);
            }
        });

        btnFSubmit.setText("Submit Feedback");
        btnFSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFSubmitActionPerformed(evt);
            }
        });

        lblFName.setText("Enter Student Name and Surname");

        lblFRating.setText("Rate 1-5");

        btnFDelete.setText("Delete Review");
        btnFDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFDeleteActionPerformed(evt);
            }
        });

        lblFComment.setText("Enter Comment:");

        cmbFCounselor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblFCounselorName.setText("Enter Counselor Name");

        javax.swing.GroupLayout pFeedbackLayout = new javax.swing.GroupLayout(pFeedback);
        pFeedback.setLayout(pFeedbackLayout);
        pFeedbackLayout.setHorizontalGroup(
            pFeedbackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pFeedbackLayout.createSequentialGroup()
                .addGap(393, 393, 393)
                .addComponent(lblFHead)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pFeedbackLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pFeedbackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pFeedbackLayout.createSequentialGroup()
                        .addComponent(lblFRating)
                        .addContainerGap())
                    .addGroup(pFeedbackLayout.createSequentialGroup()
                        .addGroup(pFeedbackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pFeedbackLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(pFeedbackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnFEdit)
                                    .addComponent(btnFDelete))
                                .addGap(18, 18, 18))
                            .addGroup(pFeedbackLayout.createSequentialGroup()
                                .addGroup(pFeedbackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFComment, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblFComment)
                                    .addComponent(lblFCounselorName)
                                    .addGroup(pFeedbackLayout.createSequentialGroup()
                                        .addGap(74, 74, 74)
                                        .addComponent(btnFSubmit)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE))
                            .addGroup(pFeedbackLayout.createSequentialGroup()
                                .addComponent(cmbFCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnFClear)
                                .addGap(68, 68, 68)))
                        .addGroup(pFeedbackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pFeedbackLayout.createSequentialGroup()
                                .addComponent(spFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pFeedbackLayout.createSequentialGroup()
                                .addComponent(lblFTable)
                                .addGap(278, 278, 278))))
                    .addGroup(pFeedbackLayout.createSequentialGroup()
                        .addGroup(pFeedbackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spnRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFName))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pFeedbackLayout.setVerticalGroup(
            pFeedbackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pFeedbackLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFHead)
                .addGap(130, 130, 130)
                .addComponent(lblFTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pFeedbackLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(lblFRating)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblFName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(lblFComment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(lblFCounselorName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pFeedbackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbFCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFClear))
                .addGap(46, 46, 46)
                .addComponent(btnFSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnFEdit)
                .addGap(18, 18, 18)
                .addComponent(btnFDelete)
                .addGap(38, 38, 38))
        );

        tpMain.addTab("Feedback", pFeedback);

        lblAHead.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblAHead.setText("Appointments Page");

        lblACounselor.setText("Counselor:");

        lblATime.setText("Time(24hr) (hh:mm):");

        lblADate.setText("Date (yyyy/mm/dd):");

        lblStudentInfo.setText("Student Name and Surname:");

        cmbCounselor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "John", "Jane", "Bob", "Kevin" }));
        cmbCounselor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCounselorActionPerformed(evt);
            }
        });

        btnBook.setText("Make Booking");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        btnAClear.setText("Clear Fields");
        btnAClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAClearActionPerformed(evt);
            }
        });

        btnAReschedule.setText("Reschedule");
        btnAReschedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnARescheduleActionPerformed(evt);
            }
        });

        tblAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Counselor Name", "Specialization", "Status", "Date", "Time", "Student Name"
            }
        ));
        spAppointments.setViewportView(tblAppointments);

        lblATable.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblATable.setText("Current Appointments:");

        btnACancel.setText("Cancel");
        btnACancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnACancelActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pAppointmentLayout = new javax.swing.GroupLayout(pAppointment);
        pAppointment.setLayout(pAppointmentLayout);
        pAppointmentLayout.setHorizontalGroup(
            pAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAppointmentLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(pAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pAppointmentLayout.createSequentialGroup()
                        .addGroup(pAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblATime)
                            .addComponent(lblACounselor)
                            .addComponent(txtATime, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pAppointmentLayout.createSequentialGroup()
                                .addComponent(btnBook)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAClear))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnACancel)
                                .addComponent(btnAReschedule)
                                .addComponent(btnView)))
                        .addGap(18, 18, 18)
                        .addComponent(spAppointments, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE))
                    .addGroup(pAppointmentLayout.createSequentialGroup()
                        .addGroup(pAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblADate)
                            .addComponent(lblStudentInfo)
                            .addGroup(pAppointmentLayout.createSequentialGroup()
                                .addComponent(txtADate, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(211, 211, 211)
                                .addComponent(lblATable))
                            .addComponent(txtStudentInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(pAppointmentLayout.createSequentialGroup()
                .addGap(317, 317, 317)
                .addComponent(lblAHead)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pAppointmentLayout.setVerticalGroup(
            pAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAppointmentLayout.createSequentialGroup()
                .addComponent(lblAHead)
                .addGap(24, 24, 24)
                .addComponent(lblStudentInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtStudentInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblADate)
                .addGap(1, 1, 1)
                .addGroup(pAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtADate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblATable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pAppointmentLayout.createSequentialGroup()
                        .addComponent(lblATime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtATime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblACounselor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbCounselor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBook)
                            .addComponent(btnAClear))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnView)
                        .addGap(18, 18, 18)
                        .addComponent(btnAReschedule)
                        .addGap(18, 18, 18)
                        .addComponent(btnACancel)
                        .addGap(53, 53, 53))
                    .addGroup(pAppointmentLayout.createSequentialGroup()
                        .addComponent(spAppointments, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(38, Short.MAX_VALUE))))
        );

        tpMain.addTab("Appointments", pAppointment);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tpMain)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpMain)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnACancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnACancelActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblAppointments.getSelectedRow();
        
        if (selectedRow == -1){
            javax.swing.JOptionPane.showMessageDialog(this, "Please select the appointment to delete", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblAppointments.getModel();
        
        String studentToDelete = (String) model.getValueAt(selectedRow, 0);
        
        int confirm = JOptionPane.showConfirmDialog(this, 
                      "Are you sure you want to delete booking: " + studentToDelete + "?", 
                      "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION) {
            db.deleteBooking(studentToDelete);
            model.setRowCount(0);
            for (Object[] row : db.viewBookings()){
                model.addRow(row);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Did not delete counselor", "Cancled", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_btnACancelActionPerformed

    private void cmbCounselorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCounselorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCounselorActionPerformed

    private void btnCRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCRemoveActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCounselors.getSelectedRow();
        
        if (selectedRow == -1){
            javax.swing.JOptionPane.showMessageDialog(this, "Please select the counselor to delete", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblCounselors.getModel();
        
        String counselorToDelete = (String) model.getValueAt(selectedRow, 0);
        
        int confirm = JOptionPane.showConfirmDialog(this, 
                      "Are you sure you want to delete counselor: " + counselorToDelete + "?", 
                      "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION) {
            db.deleteCounselor(counselorToDelete);
            model.setRowCount(0);
            for (Object[] row : db.viewCounselors()){
                model.addRow(row);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Did not delete counselor", "Cancled", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_btnCRemoveActionPerformed

    private void btnFSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFSubmitActionPerformed
    //GEN-FIRST:event_btnFSubmitActionPerformed
    //read & validate
    String student   = txtFStudentName.getText().trim();
    String counselor = (String)cmbFCounselor.getSelectedItem();
    int    rating    = (Integer)spnRating.getValue();
    String comment   = txtFComment.getText().trim();
    if (student.isEmpty() || counselor == null || comment.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all fields.");
        return;
    }

    //save
    db.addFeedback(student, counselor, rating, comment);

    //refresh UI
    loadFeedback();
    clearFeedbackFields();
    
    }//GEN-LAST:event_btnFSubmitActionPerformed

    private void btnFEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFEditActionPerformed
        //GEN-FIRST:event_btnFEditActionPerformed
         int row = tblFeedback.getSelectedRow();
            if (row < 0) {
            JOptionPane.showMessageDialog(this, "Select a review to edit.");
            return;
    }
    int id = (Integer)tblFeedback.getValueAt(row, 0);

    String student   = txtFStudentName.getText().trim();
    String counselor = (String)cmbFCounselor.getSelectedItem();
    int    rating    = (Integer)spnRating.getValue();
    String comment   = txtFComment.getText().trim();
    if (student.isEmpty() || counselor == null || comment.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all fields.");
        return;
    }

    db.updateFeedback(id, student, counselor, rating, comment);

    loadFeedback();
    clearFeedbackFields();
    }//GEN-LAST:event_btnFEditActionPerformed

    private void btnFDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFDeleteActionPerformed
        //GEN-FIRST:event_btnFDeleteActionPerformed
        int row = tblFeedback.getSelectedRow();
    if (row < 0) {
        JOptionPane.showMessageDialog(this, "Select a review to delete.");
        return;
    }
    if (JOptionPane.showConfirmDialog(this,
          "Are you sure you want to delete this review?",
          "Confirm Delete",
          JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {
        return;
    }
    int id = (Integer)tblFeedback.getValueAt(row, 0);
    db.deleteFeedback(id);

    loadFeedback();
    clearFeedbackFields();
    }//GEN-LAST:event_btnFDeleteActionPerformed

    private void btnCAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCAddActionPerformed
        // TODO add your handling code here:
        String fullName = txtCName.getText();
        String spec = txtCSpecialization.getText();
        String available = txtCAvailable.getText();
        Boolean avail = null;
        
        if (fullName == null || spec == null || available == null 
            || fullName.isEmpty() || spec.isEmpty() || available.isEmpty()){
            JOptionPane.showMessageDialog(this,
                    "Please enter all fields",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            if (available.equalsIgnoreCase("y")){
                avail = true;
            } else if (available.equalsIgnoreCase("n")){
                avail = false;
            } 
            if (avail != null){
                db.addCounselor(fullName, spec, avail);
                
                DefaultTableModel model = (DefaultTableModel) tblCounselors.getModel();
                model.addRow(new Object[]{fullName, spec, avail});
            } else{
                    JOptionPane.showMessageDialog(this,
                    "Enter y/n in availability",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);  
                }
        }
    }//GEN-LAST:event_btnCAddActionPerformed

    private void btnCViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCViewActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblCounselors.getModel();
        model.setRowCount(0);
        for (Object[] row : db.viewCounselors()){
            model.addRow(row);
        }
    }//GEN-LAST:event_btnCViewActionPerformed

    private void btnCUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCUpdateActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCounselors.getSelectedRow();
        
        if (selectedRow == -1){
            javax.swing.JOptionPane.showMessageDialog(this, "Please select the counselor to delete", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblCounselors.getModel();
        
        String oldName = (String) model.getValueAt(selectedRow, 0);
        String newName = txtCName.getText();
        String spec = txtCSpecialization.getText();
        String available = txtCAvailable.getText();
        Boolean avail = null;
        
        if (newName == null || spec == null || available == null 
            || newName.isEmpty() || spec.isEmpty() || available.isEmpty()){
            JOptionPane.showMessageDialog(this,
                    "Please enter all fields",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            if (available.equalsIgnoreCase("y")){
                avail = true;
            } else if (available.equalsIgnoreCase("n")){
                avail = false;
            } 
            if (avail != null){
                model.setRowCount(0);
                model.addRow(db.updateCounselor(oldName, newName, spec, avail));
            } else{
                    JOptionPane.showMessageDialog(this,
                    "Enter y/n in availability",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);  
                }
        } 
    }//GEN-LAST:event_btnCUpdateActionPerformed

    private void btnCClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCClearActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblCounselors.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_btnCClearActionPerformed

    private void btnAClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAClearActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblAppointments.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_btnAClearActionPerformed

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy/MM/dd");
    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern("HH:mm");
    
    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblAppointments.getModel();
        
        String name = txtStudentInfo.getText();
        String date = txtADate.getText();
        String time = txtATime.getText();
        String counselor = (String) cmbCounselor.getSelectedItem();
        
        if (name == null || date == null || time == null || counselor == null
            || name.isEmpty() || date.isEmpty() || time.isEmpty() || counselor.isEmpty()){
            JOptionPane.showMessageDialog(this,
                    "Please enter all fields",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            try{
                LocalDate.parse(date, DATE_FORMATTER);
                LocalTime.parse(time, TIME_FORMATTER);
                
                model.addRow(db.addBooking(name, date, time, counselor));
            } catch(DateTimeParseException e){
                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_btnBookActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblCounselors.getModel();
        model.setRowCount(0);
        for (Object[] row : db.viewBookings()){
            model.addRow(row);
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnARescheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnARescheduleActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblAppointments.getSelectedRow();
        
        if (selectedRow == -1){
            javax.swing.JOptionPane.showMessageDialog(this, "Please select the booking to update", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblAppointments.getModel();
        
        String oldStudent = (String) model.getValueAt(selectedRow, 5);
        String newStudent = txtStudentInfo.getText();
        String spec = (String) model.getValueAt(selectedRow, 1);
        String counselor = (String) cmbCounselor.getSelectedItem();
        String date = txtADate.getText();
        String time = txtATime.getText();
        String status = (String) model.getValueAt(selectedRow, 2);
        
        if (newStudent == null || spec == null || counselor == null || date == null || time == null 
            || newStudent.isEmpty() || spec.isEmpty() || counselor.isEmpty() || date.isEmpty() || time.isEmpty()){
            JOptionPane.showMessageDialog(this,
                    "Please enter all fields",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            model.setRowCount(0);
            model.addRow(db.UpdateBooking(oldStudent, newStudent, spec, status, date, time, counselor));
        }
    }//GEN-LAST:event_btnARescheduleActionPerformed

    private void tblFeedbackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFeedbackMouseClicked
        int row = tblFeedback.getSelectedRow();
        if (row < 0) return;
        // Columns: 0=ID, 1=Student, 2=Counselor, 3=Rating, 4=Comment
        txtFStudentName.setText(tblFeedback.getValueAt(row, 1).toString());
        cmbFCounselor.setSelectedItem(tblFeedback.getValueAt(row, 2).toString());
        spnRating.setValue((Integer)tblFeedback.getValueAt(row, 3));
        txtFComment.setText(tblFeedback.getValueAt(row, 4).toString());
    }//GEN-LAST:event_tblFeedbackMouseClicked

    private void btnFClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFClearActionPerformed
        clearFeedbackFields();
    }//GEN-LAST:event_btnFClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static connectDb db = new connectDb();
    
    public static void main(String args[]) {
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pManagement().setVisible(true);
                try{
                    db.connect();
                    //db.createTable();
                    //db.dropTables();
                } catch(ClassNotFoundException ex){
                    ex.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnACancel;
    private javax.swing.JButton btnAClear;
    private javax.swing.JButton btnAReschedule;
    private javax.swing.JButton btnBook;
    private javax.swing.JButton btnCAdd;
    private javax.swing.JButton btnCClear;
    private javax.swing.JButton btnCRemove;
    private javax.swing.JButton btnCUpdate;
    private javax.swing.JButton btnCView;
    private javax.swing.JButton btnFClear;
    private javax.swing.JButton btnFDelete;
    private javax.swing.JButton btnFEdit;
    private javax.swing.JButton btnFSubmit;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> cmbCounselor;
    private javax.swing.JComboBox<String> cmbFCounselor;
    private javax.swing.JLabel lblACounselor;
    private javax.swing.JLabel lblADate;
    private javax.swing.JLabel lblAHead;
    private javax.swing.JLabel lblATable;
    private javax.swing.JLabel lblATime;
    private javax.swing.JLabel lblCAvailability;
    private javax.swing.JLabel lblCHead;
    private javax.swing.JLabel lblCName;
    private javax.swing.JLabel lblCSpecialization;
    private javax.swing.JLabel lblCTable;
    private javax.swing.JLabel lblFComment;
    private javax.swing.JLabel lblFCounselorName;
    private javax.swing.JLabel lblFHead;
    private javax.swing.JLabel lblFName;
    private javax.swing.JLabel lblFRating;
    private javax.swing.JLabel lblFTable;
    private javax.swing.JLabel lblHead;
    private javax.swing.JLabel lblStudentInfo;
    private javax.swing.JPanel pAppointment;
    private javax.swing.JPanel pCounselor;
    private javax.swing.JPanel pFeedback;
    private javax.swing.JPanel pHome;
    private javax.swing.JScrollPane spAppointments;
    private javax.swing.JScrollPane spCounselors;
    private javax.swing.JScrollPane spFeedback;
    private javax.swing.JSpinner spnRating;
    private javax.swing.JTable tblAppointments;
    private javax.swing.JTable tblCounselors;
    private javax.swing.JTable tblFeedback;
    private javax.swing.JTabbedPane tpMain;
    private javax.swing.JTextField txtADate;
    private javax.swing.JTextField txtATime;
    private javax.swing.JTextField txtCAvailable;
    private javax.swing.JTextField txtCName;
    private javax.swing.JTextField txtCSpecialization;
    private javax.swing.JTextField txtFComment;
    private javax.swing.JTextField txtFStudentName;
    private javax.swing.JTextField txtStudentInfo;
    // End of variables declaration//GEN-END:variables
}
